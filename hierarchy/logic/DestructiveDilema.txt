Destructive dilemma
Destructive dilemma[1][2] is the name of a valid rule of inference of propositional logic. It is the inference that, if P implies Q and R implies S and either Q is false or S is false, then either P or R must be false. In sum, if two conditionals are true, but one of their consequents is false, then one of their antecedents has to be false. Destructive dilemma is the disjunctive version of modus tollens. The disjunctive version of modus ponens is the constructive dilemma. The rule can be stated:
P ? Q , R ? S , ¬ Q ? ¬ S ? ¬ P ? ¬ R {\displaystyle {\frac {P\to Q,R\to S,\neg Q\lor \neg S}{\therefore \neg P\lor \neg R}}}  
where the rule is that wherever instances of " P ? Q {\displaystyle P\to Q} ", " R ? S {\displaystyle R\to S} ", and " ¬ Q ? ¬ S {\displaystyle \neg Q\lor \neg S} " appear on lines of a proof, " ¬ P ? ¬ R {\displaystyle \neg P\lor \neg R} " can be placed on a subsequent line.
Formal notation
The destructive dilemma rule may be written in sequent notation:
( P ? Q ) , ( R ? S ) , ( ¬ Q ? ¬ S ) ? ( ¬ P ? ¬ R ) {\displaystyle (P\to Q),(R\to S),(\neg Q\lor \neg S)\vdash (\neg P\lor \neg R)}  
where ? {\displaystyle \vdash }  is a metalogical symbol meaning that ¬ P ? ¬ R {\displaystyle \neg P\lor \neg R}  is a syntactic consequence of P ? Q {\displaystyle P\to Q} , R ? S {\displaystyle R\to S} , and ¬ Q ? ¬ S {\displaystyle \neg Q\lor \neg S}  in some logical system;
and expressed as a truth-functional tautology or theorem of propositional logic:
( ( ( P ? Q ) ? ( R ? S ) ) ? ( ¬ Q ? ¬ S ) ) ? ( ¬ P ? ¬ R ) {\displaystyle (((P\to Q)\land (R\to S))\land (\neg Q\lor \neg S))\to (\neg P\lor \neg R)}  
where P {\displaystyle P} , Q {\displaystyle Q} , R {\displaystyle R}  and S {\displaystyle S}  are propositions expressed in some formal system.
Natural language example
If it rains, we will stay inside. 
If it is sunny, we will go for a walk. 
Either we will not stay inside, or we will not go for a walk, or both. 
Therefore, either it will not rain, or it will not be sunny, or both. 

